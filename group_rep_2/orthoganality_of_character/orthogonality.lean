import schur_theorem.schur
import data.complex.basic
import Tools.tools
import Tools.eigen_value
import linear_algebra.caracteristic_polynomial
import basic_definitions.matrix_representation
import basic_definitions.equiv
import permutation_representation.regular_representation
import Reynold_operator.reynold_scalar_product
set_option pp.generalized_field_notation false
open_locale big_operators
universes u v w w'
open car_pol  
variables {G : Type u} [group G]  
          {X : Type v} [fintype X][decidable_eq X] 
          {œÅ : group_representation G ‚ÑÇ (X ‚Üí ‚ÑÇ)}
open  Schur‚ÇÇ morphism.from_irreductible equiv_morphism shur‚ÇÅ_comm_ring stability pequiv
open  Reynold
/--
   
-/
theorem eigen_values_exist (hyp : 0 < fintype.card X ) : ‚àÄ f : (X ‚Üí ‚ÑÇ ) ‚Üí‚Çó[‚ÑÇ] (X ‚Üí ‚ÑÇ),  ‚àÉ t : ‚ÑÇ, ‚àÉ œÜ  : (X ‚Üí ‚ÑÇ ), 
 (œÜ ‚â† 0) ‚àß  (f œÜ + t ‚Ä¢ œÜ =0) := begin
    intro f,
    rcases eigen_values_exist_mat hyp (linear_map.to_matrix f) with ‚ü®w, hyp_w‚ü©  ,
    let t := exist_ker_not_trivial (f+ w ‚Ä¢ 1),
    use w,  apply t,
    have : linear_map.to_matrix f + w ‚Ä¢ 1 = linear_map.to_matrix (f + w ‚Ä¢ 1),
        rw to_matrix_add, rw to_matrix_smul, rw to_matrix_one,
    rw ‚Üê this, assumption,
 end

theorem Schur_on (hyp : 0 < fintype.card X ) [Irreductible œÅ] (f : œÅ ‚ü∂·µ£ œÅ) : 
        ‚àÉ t : ‚ÑÇ, f + t ‚Ä¢ 1  = 0  := 
begin 
    rcases eigen_values_exist hyp f.‚Ñì with ‚ü®t,‚ü® œÜ, hyp_t‚ü© ‚ü©,
    use t, 
    apply morphism.ext, apply linear_map.ext, 
    exact Schur‚ÇÇ f t œÜ hyp_t,
 end 
/--
    Universe Y  = Univrse X ? here i put the dsame for matrix !!!
-/
variables {Y : Type v} [fintype Y][decidable_eq Y] {œÅ' : group_representation G ‚ÑÇ (Y ‚Üí ‚ÑÇ)}

variables [fintype G][decidable_eq G]


open matrix linear_map character
open_locale matrix

/--
Le theorem vit sans hypoth√®se 
-/
theorem ùí™‚ÑõùíØ‚Ñãùí™  (F : not_isomorphic œÅ œÅ')[Irreductible œÅ ][Irreductible œÅ'] : 
scalar_product G ‚ÑÇ   (œá œÅ ) (œá œÅ' ) = 0 := 
begin 
    rw interpretation_produit_scalaire œÅ œÅ',
    apply finset.sum_eq_zero,
    intros, 
    rw Reynold_is_zero F, exact rfl,
end


open Ring



lemma proof_strategy‚ÇÉ  (a b: ‚ÑÇ ) (hyp : b   ‚â† 0) (M N : matrix X X ‚ÑÇ ): a ‚Ä¢ M = b ‚Ä¢ N ‚Üí N = (b ‚Åª¬π * a) ‚Ä¢ M := 
begin
    intros, rw mul_smul_mat, rw a_1,
     erw ‚Üê mul_smul_mat, rw inv_mul_cancel, rw one_smul, exact hyp,
end

/--
    Faire mieux !!!  hyp et hyp'
-/
lemma Schur_grallr [Irreductible œÅ] (f : œÅ ‚ü∂·µ£ œÅ ) (hyp' : 0 < fintype.card X ) (hyp : fintype.card X ‚â† 0)  :  
(to_matrix f.‚Ñì) = ((fintype.card X : ‚ÑÇ)‚Åª¬π * (matrix.trace X  ‚ÑÇ  ‚ÑÇ (linear_map.to_matrix f.‚Ñì))) ‚Ä¢  1
:= begin 
    apply proof_strategy‚ÇÉ,
    refine function.injective.ne (nat.cast_injective) hyp,
    rcases Schur_on hyp' f with ‚ü®Œ∂, hyp‚ü©,
    have  : f.‚Ñì + Œ∂ ‚Ä¢ (1 : œÅ ‚ü∂·µ£ œÅ).‚Ñì = 0, 
        erw ‚Üê morphism_module.coe_smul,
        rw ‚Üê morphism_module.add_coe, rw hyp, exact rfl,
    rw homo_eq_diag f.‚Ñì Œ∂  this, rw map_smul, rw trace_one,
    erw ‚Üê mul_smul_mat,
    rw mul_comm,
    exact rfl,
end


lemma proof_strategy‚ÇÇ (a : ‚ÑÇ ) {  c d : ‚ÑÇ } :  c = d  ‚Üí    a * c = a * d := congr_arg (Œª x, a * x)


lemma Reynold_E  (œÅ : group_representation G ‚ÑÇ (X ‚Üí ‚ÑÇ)) [Irreductible œÅ ](hyp' : 0 < fintype.card X ) (hyp : fintype.card X ‚â† 0)(x : X √ó X)  : 
to_matrix ((Re œÅ œÅ) (to_lin (‚Ñ∞ x.snd x.fst))).‚Ñì x.snd x.fst =   ‚Üë(fintype.card G) * (‚Üë(fintype.card X))‚Åª¬π * (trace X ‚ÑÇ ‚ÑÇ) (‚Ñ∞ x.snd x.fst) :=
begin 
    rw Schur_grallr ((Re œÅ œÅ) (to_lin (‚Ñ∞ x.snd x.fst)))hyp'  hyp,
    -- clean up
    rw [ smul_val,  one_val, mul_assoc,  mul_comm ‚Üë(fintype.card G),  mul_assoc],
    apply proof_strategy‚ÇÇ (‚Üë(fintype.card X))‚Åª¬π,
    rw to_matrix_Reynold_E, 
    rw trace_E, split_ifs,
        -- (trace ‚àë = ‚àë trace) and (trace conjugate = trace) and (trace ‚Ñ∞ x x = 1) 
        {rw h,rw trace_Reynold_E,},
        -- trivial 
        {repeat {rw mul_zero}}, 
end


lemma ùí™ùìáùìâùíΩ‚Ñ¥ (œÅ : group_representation G ‚ÑÇ (X ‚Üí ‚ÑÇ ))  [Irreductible œÅ ] (hyp' : 0 < fintype.card X )(hyp : fintype.card X ‚â† 0) : 
scalar_product G ‚ÑÇ  (œá œÅ ) (œá œÅ ) = (fintype.card G : ‚ÑÇ ) := 
begin 
    rw interpretation_produit_scalaire,
    conv_lhs{
        apply_congr, skip, 
        rw Reynold_E œÅ hyp' hyp,
        rw trace_E,
    }, 
    rw ‚Üê finset.mul_sum,
    -- ‚àë x  : X √ó X, ite (x.fst  = x.snd) 1 0 = card X ... the diagonal equivalence 
    erw sum_diagonal_one_eq_cardinal X ‚ÑÇ,
    rw mul_assoc,rw inv_mul_cancel,rw mul_one,
    exact function.injective.ne (nat.cast_injective) hyp,
end

theorem scalar_product_equiv (œÅ : group_representation G ‚ÑÇ (X ‚Üí ‚ÑÇ ))  [Irreductible œÅ ] (œÅ' : group_representation G ‚ÑÇ (Y ‚Üí ‚ÑÇ ))  
(iso : is_isomorphic œÅ œÅ' ) [Irreductible œÅ ] (hyp' : 0 < fintype.card X )
(hyp : fintype.card X ‚â† 0) : scalar_product G ‚ÑÇ  (œá œÅ ) (œá œÅ' ) = (fintype.card G : ‚ÑÇ ) := begin 
    rw ‚Üê  equivalence.carac_eq' œÅ œÅ' iso,
    erw ùí™ùìáùìâùíΩ‚Ñ¥ œÅ,exact hyp', exact hyp,
end
noncomputable instance : decidable (is_isomorphic œÅ œÅ' ) := begin 
    exact classical.dec (is_isomorphic œÅ œÅ'),
end
theorem scalar_product_ite (œÅ : group_representation G ‚ÑÇ (X ‚Üí ‚ÑÇ ))  [Irreductible œÅ ] (œÅ' : group_representation G ‚ÑÇ (Y ‚Üí ‚ÑÇ ))  
 [Irreductible œÅ' ](hyp' : 0 < fintype.card X )
(hyp : fintype.card X ‚â† 0) :  scalar_product G ‚ÑÇ  (œá œÅ ) (œá œÅ' ) = if (is_isomorphic œÅ œÅ') then (fintype.card G : ‚ÑÇ ) else 0 
:= begin 
    split_ifs,  apply scalar_product_equiv (by assumption), exact h, exact hyp', exact hyp,
    let  := non_is_isomorphic_eq_not_isomorphic œÅ œÅ' h,
    exact ùí™‚ÑõùíØ‚Ñãùí™ this , 
end 


example (œÅ : group_representation G ‚ÑÇ (X ‚Üí ‚ÑÇ )) [Irreductible œÅ ] 
                (hyp : fintype.card X ‚â† 0) (hyp' : 0 < fintype.card X ) : 

    (‚Üë(fintype.card G))‚Åª¬π * ‚àë (t : G), œá œÅ t * œá œÅ t‚Åª¬π = 1 := 
begin 
    let g := ùí™ùìáùìâùíΩ‚Ñ¥ œÅ hyp' hyp,
    rw scalar_product_ext at g,
    rw g, apply inv_mul_cancel,rw coe_to_lift, simp,
     intro, 
    let r := finset.card_eq_zero.mp a, have : ( 1 : G) ‚àà finset.univ, --- grrrrrrrrrr
        refine finset.mem_univ 1, 
    finish,
end
example (F : not_isomorphic œÅ œÅ')[Irreductible œÅ ][Irreductible œÅ'] : 

         (‚Üë(fintype.card G))‚Åª¬π *   ‚àë (t : G), œá œÅ t * œá œÅ' t‚Åª¬π = 0  := 
begin 
    let g := ùí™‚ÑõùíØ‚Ñãùí™ F,
    rw scalar_product_ext at g,
    rw g, erw mul_zero,
end

#check Regular.Regular_representation
/--
    OKay for other ring than `‚ÑÇ` !  
-/
theorem scalar_product_with_regular (œÅ : group_representation G ‚ÑÇ (X ‚Üí ‚ÑÇ )) : 
scalar_product G ‚ÑÇ (œá œÅ) (œá (Regular.Regular_representation G ‚ÑÇ )) =  (œá œÅ 1) * (fintype.card G) := 
begin 
    rw scalar_product_ext,
    conv_lhs{
        apply_congr,skip,
        rw Regular.character_of_regular_representation, rw mul_ite, rw mul_zero,
    },
    rw finset.sum_ite,
     rw finset.sum_const_zero, rw add_zero,simp,rw finset.sum_filter,
     rw finset.sum_ite_eq',split_ifs,
     rw œá_one,
     let t := (finset.mem_univ (1 : G)),trivial,
end